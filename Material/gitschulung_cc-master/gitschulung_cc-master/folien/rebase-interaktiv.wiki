==== \de{Rebase: Interaktiv}{Interactive Rebase} ====

\de{Mit einem interaktiven Rebase kann man die Entwicklungsgeschichte nach Belieben anpassen (»rewrite history«).} \
   {You can rewrite the development history any way you want using ''interactive rebase''.}
--.5em--

* \de{Der Rebase-Prozess wird zwischendurch angehalten}{The Rebase precess will be stopped in-between}
* \de{Commits können dann beliebig verändert werden}{You can apply arbitrary changes to the commit} (@edit@)
** \de{Reihenfolge der Commits vertauschen}{Change order of commits}
** \de{Commits verwerfen}{Throw away commits}
** \de{Commit-Message abändern}{Amend the commit message} (@reword@)
** \de{Zwei oder mehr Commits zusammenfassen}{Combine changes from two or more commits} (@squash@, @fixup@)
** \de{Einen Commit in kleinere aufteilen}{Split up a large commit into smaller commits}
* \de{Danach wird der Rebase-Prozess fortgesetzt}{Then, the Rebase process will continue}
--.5em--

==== \de{Rebase-Kommandos}{Rebase Commands} ====

<[block]{\de{Interaktives Rebase starten}{Start interactive rebase}}
@git rebase -i ''basis''@\\
@git rebase -i HEAD\~{}7@\\
@git rebase -i master@\\
@git rebase -i origin/master@
[block]>

<[block]{\de{Interaktives Rebase abbrechen}{Abort interactive rebase}}
@git rebase -{}-abort@
[block]>

<[block]{\de{Nach einer Änderung fortfahren}{Continue rebase after making a change}}
@git rebase -{}-continue@
[block]>

<[block]{\de{Commit überspringen}{Skip a commit}}
@git rebase -{}-skip@
[block]>

==== \de{Interaktiver Rebase: Beispiel}{Interactive Rebase: A Worked Example} ====

\de{In einem Commit (@1069e2e@) steckt ein Passwort, was nicht ins Repository wandern sollte.} \
   {A password that is not supposed to go into the repository was erroneously introduced in commit @1069e2e@.}

<[block]{\de{Commit abändern}{Change the relevant commit}}
@git rebase -i 1069e2e\^@\\
... \de{beim Commit @pick@ durch @edit@ ersetzen, @rebase@ hält dort an}{change @pick@ to @edit@ at the faulty commit}\\
@vim ''\de{datei}{file}''@ --> \de{Passwort entfernen\!}{Remove password\!}\\
@git add ''\de{datei}{file}''@\\
@git commit -{}-amend -C HEAD@\\
@git rebase -{}-continue@
[block]>

* \de{Da nun @1069e2e@ geändert wurde, ist die SHA1-ID nicht mehr die gleiche} \
     {Commit @1069e2e@ was changed, so its SHA1-ID has changed}
* \de{Als Folge sind auch die Commit-IDs aller darauf aufbauenden Commits verändert, \
      weil sie nun die geänderte ID referenzieren (»ripple effect«)} \
     {Because of this fact, all commit-IDs of all commits based on this commit have changed, \
      since they now store a reference to a different commit-ID. («ripple effect»)}

==== \de{Einen Commit in mehrere aufteilen}{Splitting a Commit into smaller Commits} ====

<[block]{\de{Interaktives Rebase starten}{Start interactive rebase}}
@git rebase -i master@\\
... \de{beim gewünschten Commit @pick@ durch @edit@ ersetzen}{Replace @pick@ by @edit@ at chosen commit}
[block]>

<[block]{\de{Commit aufteilen}{Split up commit}}
@git reset HEAD\^@\\
@git add -p@\\
@git commit -m '\de{Erster Teil}{First Part}'@\\
@git add ...@\\
@git commit -m '\de{Zweiter Teil}{Second Part}'@\\
[block]>

<[block]{\de{Rebase weiterlaufen lassen}{Continue Rebase process}}
@git rebase -{}-continue@
[block]>

==== »Rebase early, rebase often« ====

* \de{Fehler passieren immer -- spätere Commits beheben das Problem} \
     {You will always make errors while coding -- later commits will fix the problems}
** \de{Haupt-Commit und Verbesserungen hintereinander anordnen und per @fixup@ zu einem Commit verschmelzen} \
      {Re-order commits: Main commit, then fixup commits; then use @fixup@ to combine them}
* \de{So erhält man eine sinnvolle Entwicklungsgeschichte ohne ablenkende Commits (fünf mal „einen kleinen Fehler behoben“)} \
     {This way you’ll have a concise code history without useless commits like “forgot to add a file”, “fixed typo”}

* \de{Ziel ist es, die Entwicklung schlüssig darzustellen}{The ultimate aim is to create a ''readable development history''}
** \de{Nicht zu viele mikroskopisch kleine Commits}{Not too many tiny commits}
** \de{Nicht zu viele riesengroße Commits}{Not too many huge commits}

* \de{Erst dann sollten die Commits veröffentlicht werden}{Only after cleaning up you should publish your commits}

--.5cm--
\de{!'''Achtung\!'''! Auch hier gilt wieder: Nur unveröffentlichte Commits verändern\!} \
   {!'''Warning\!'''! Note again: Only rebase not-yet-published commits\!}
