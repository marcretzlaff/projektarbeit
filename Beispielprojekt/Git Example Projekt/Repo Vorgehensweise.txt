1. Step git init
2. Step open repo -> init commit readme
3. Step .gitignore hinzufügen -> ignore .o und geo und step 1 einzeln hizufügen
4. Step squash zu Repo init 
5. Step add Step Two
Add Step 4 to working directory
stash step 4 
6. Step  feature Branch mit Step Three ( Grafik.h )
7. Step Master mit Step Four (Linie) von Stash
8. Step Master mit Step Five (Kreis)
9. Step Master mit Step Six (Rechteck)
10. Rebase feature onto master (merge conflict)
11. New Branch mit Step Seven
12. fast-foward master auf new branch 11. -> delete danach
13. Step Eight auf Master
14. fast-forward feature auf master
15. Step Nine auf Feature
16. Pull request feature in master
18. Delete feature branch
19. Tag Revision 1 and push it
20. Create enhancement branch für druckertinte function


#COMMANDOZEILE#

git init
echo "Tutorial git commandozeile" > README
echo $'*o \n geo' > -gitignore
git add .gitignore README //dateien mit . am anfang nicht erfasst -> .gitignore handisch hizufügen
git commit -m 'inital commit'

git status //statusabfrage was geändert wird im working directory 
git shortlog -> Übersicht der Commits im Branch
//kopier EINZELN step 1 -> 3 Commits
3x
git add * 
git status
git commit -m ...

//squash
git rebase -i HEAD~[N] //n anzahl commits back
oder
git rebase -i Hash //commit before new squashed commit

-> Editor s bei den unteren > speichern strg o > enter > strg x (beenden) > neues fenster (passe commit an) strg o strg enter
> rebase erfolgreich


//kopier step two
git status
git add *
git commit -m 'step two'

//kopier step 4
git stash save "step4" -u -> untracked files also or git add before ( git stash -p for single files )
git stash list

git checkout -b feature
//kopier 3
git add*
git commit -m 'step three'

git checkout master
git stash pop stash@{0}
git add * falls nicht staged
git commit
//5 adden 
//neuer Branch mit 6 adden
git checkout -b addon
//6 adden
git checkout master
git merge addon

//3 in master holen 
git checkout feature
git rebase master
//stoppt wegen konflikte -> in gitkraken resolven
git rebase --continue
->möglicherweise master rebase feature um master fast forwarden auf feature oder fast forward

git checkout -b try
//kopier 7
git add *
git commit ...

git fetch . try:master  //fast forward master auf try
git checkout master
git branch -d try

//kopier 8
add commit

git fetch . master:feature
git checkout feature
//kopier 9
git request-pull bf1674 .   //-p (include patch text) start url (end // falls benötigt) -> nur info welche man maintainer geben kann -> nichts mit github PR zu tun
		   ^ master last commit
git pull . feature:master //da wir der maintainer sind holen wir uns die changes
git branch -d feature

git tag -a v1.0 -m 'version 1.0'
//git push origin v1.0

git checkout -b enhancement
//kopier finish
git diff HEAD
oder 
git diff --staged wenn nur staged

anstatt pull request patch:
git diff v1.0 a50e14 > patch.diff
//patch.diff mit änderungen nun im workspace
git checkout master
git apply patch.diff
rm patch.diff
git add *
git commit ...





